#!/usr/bin/env python

# Software License Agreement (BSD License)
#
# Copyright (c) 2009, Regents of the University of California
# All rights reserved.
#
# Redistribution and use of this software in source and binary forms, with or
# without modification, are permitted provided that the following conditions
# are met:
#
#   Redistributions of source code must retain the above
#   copyright notice, this list of conditions and the
#   following disclaimer.
#
#   Redistributions in binary form must reproduce the above
#   copyright notice, this list of conditions and the
#   following disclaimer in the documentation and/or other
#   materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Author: Sunil Soman sunils@cs.ucsb.edu

import getopt, sys, os
from xml.dom import minidom
import euca_tools
from boto.exception import S3ResponseError, S3CreateError
from boto.s3 import Connection
from boto.s3.key import Key
import euca_tools

usage_string = """
USAGE
    euca-upload-bundle -b, --bucket bucket -m, --manifest manifest_path -a, --access-key access_key_id 
	  -s, --secret-key secret_key
	  [--acl canned_acl] [--ec2cert ec2cert_path] [-d, --directory bundle_path] [--debug]
	  [--part part] [--url url] [--retry] [--skipmanifest] [--ssl] [-h, --help]
	  [--version]

    Where
	bucket - The name of the bucket to upload to. Bucket will be created if it does not exist.
	manifest_path - The path to the manifest file.
	access_key_id - The user's AWS access key or Query ID.
	secret_key - The user's secret key.

	canned_acl - Canned access control policy (defaults to "aws-exec-read").
	ec2cert_path - The path to the Cloud's X509 public key certificate.
	bundle_path - The directory containing the bundled image to upload (default to the directory containing the manifest).
	part - Uploads specified part and all subsequent parts.
	url - URL for the service (defaults to http://localhost:8773/services/Walrus).
	--retry - Retry if failed.
	--skipmanifest - Do not upload the manifest file.
	--ssl - Use secure http
"""

version_string = """    euca-upload-bundle version: 1.0 (BSD)"""

def usage():
    print usage_string
    euca_tools.usage()

def version():
    print version_string
    sys.exit()

def create_bucket(connection, bucket):
    print 'creating bucket:', bucket
    return connection.create_bucket(bucket)

def ensure_bucket(connection, bucket):
    bucket_instance = None
    try:
	print 'checking bucket:', bucket
	bucket_instance = connection.get_bucket(bucket)
    except S3ResponseError as s3error:
        s3error_string = '%s' % (s3error)
	if (s3error_string.find("404") >= 0):
	    try:
                bucket_instance = create_bucket(connection, bucket) 
	    except S3CreateError:
		print 'Unable to create bucket %s' % (bucket)
		sys.exit()
    return bucket_instance
 
def get_parts(manifest_filename):
    parts = []
    dom = minidom.parse(manifest_filename) 
    manifest_elem = dom.getElementsByTagName('manifest')[0]
    parts_list = manifest_elem.getElementsByTagName('filename')
    for part_elem in parts_list:
	nodes = part_elem.childNodes
	for node in nodes:
            if node.nodeType == node.TEXT_NODE:
                parts.append(node.data)
    return parts

def get_absolute_filename(filename):
    f_parts = filename.split('/')
    return f_parts[len(f_parts) - 1]

def upload_manifest(bucket_instance, manifest_filename):
    print 'uploading manifest file'
    k = Key(bucket_instance)
    k.key = get_absolute_filename(manifest_filename)
    manifest_file = open(manifest_filename, "rb")
    k.set_contents_from_file(manifest_file)

def upload_parts(bucket_instance, directory, parts):
    print 'uploading parts'
    for part in parts:
        print 'part:', part
        k = Key(bucket_instance)
        k.key = part
        part_file = open(directory + "/" + part, "rb")
        k.set_contents_from_file(part_file)

def main():
    euca = None
    try:
        euca = euca_tools.EucaTool('b:m:a:s:Sd:',
                                  ['bucket=', 'manifest=', 
                                  'acl=', 'ec2cert=', 'directory=', 'part=', 'retry', 'skipmanifest'],
				  is_s3=True)
    except:
        usage()
 
    bucket=None
    manifest_path = None
    ec2cert_path = None
    directory = None
    part = None
    canned_acl = None
    retry = False
    skipmanifest = False
    debug = False
    ssl = False

    for name, value in euca.opts:
        if name in ('-h', '--help'):
            usage()
        if name in ('-b', '--bucket'):
            bucket = value
        if name in ('-m', '--manifest'):
            manifest_path = value
        if name in ('--ec2cert'):
            ec2cert_path = value
        if name in ('--acl'):
            canned_acl = value
        if name in ('-d', '--directory'):
            directory = value
        if name in ('--part'):
            part = value
        if name in ('--url'):
            url = value
	if name in ('--retry'):
	    retry = True
	if name in ('--skipmanifest'):
	    skipmanifest = True
	if name in ('--version'):
	    version()
	if name in ('-S'):
	    ssl = True

    skipmanifest = False
    if bucket and manifest_path:
	conn = euca.make_connection()
	bucket_instance = ensure_bucket(conn, bucket)
	parts = get_parts(manifest_path)
        if not directory:
	    manifest_path_parts = manifest_path.split('/')
	    directory = manifest_path.replace(manifest_path_parts[len(manifest_path_parts) - 1], '')
	if not skipmanifest:
	    upload_manifest(bucket_instance, manifest_path)
	upload_parts(bucket_instance, directory, parts)
    else:
	print 'bucket, manifest, access-key and secret-key MUST be specified.'	
        usage()

if __name__ == "__main__":
    main()
 
