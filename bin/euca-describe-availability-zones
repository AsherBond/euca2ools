#!/usr/bin/env python

# Software License Agreement (BSD License)
#
# Copyright (c) 2008, Regents of the University of California
# All rights reserved.
#
# Redistribution and use of this software in source and binary forms, with or
# without modification, are permitted provided that the following conditions
# are met:
#
#   Redistributions of source code must retain the above
#   copyright notice, this list of conditions and the
#   following disclaimer.
#
#   Redistributions in binary form must reproduce the above
#   copyright notice, this list of conditions and the
#   following disclaimer in the documentation and/or other
#   materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Author: Sunil Soman sunils@cs.ucsb.edu

import getopt, sys, os
import euca_tool

usage_string = """
DESCRIPTION
    Shows information about availability zones.

USAGE
    euca-describe-availability-zones [zone1 zone2...zoneN] 
	  [-h, --help] [--version] [--debug]

    Where
	zone1 zone2...zoneN - zones to describe. 
	-h, --help - Display this help message.
	--version - Display the version of this tool.
        --debug - Turn on debugging.
"""

version_string = """    euca-describe-availability-zones version: 1.0 (BSD)"""

def usage():
    print usage_string

def version():
    print version_string
    sys.exit()

def process_args(args):
    zone_ids = []
    for arg in args:
        zone_ids.append(arg)
    return zone_ids 

def display_zones(zones, zone_ids):
    check_zone_ids = False
    if(len(zone_ids) > 0) and (not 'verbose' in zone_ids):
	check_zone_ids = True
    for zone in zones:
	if check_zone_ids:
	    if not zone.name in zone_ids:
	        continue
        zone_string = '%s\t%s' % (zone.name, zone.state)
	print 'AVAILABILITYZONE\t%s' % (zone_string)

def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], 'hK:S:U:',
                                   ['access-key=', 'secret-key=', 'url=', 'help', 'version', 'debug'])
    except:
        usage()
	euca_tool.usage()
	sys.exit()

    debug = False

    for name, value in opts:
        if name in ('-h', '--help'):
            usage()
	    euca_tool.usage()
	    sys.exit()

	if name in ('--version'):
	    version()
	if name in ('--debug'):
	    debug = True
    
    euca = euca_tool.EucaTool(opts)
    ec2_conn = euca.make_connection()
    zone_ids = process_args(args)
    if 'verbose' in zone_ids:
	zones = ec2_conn.get_all_zones('verbose')
    else:
        zones = ec2_conn.get_all_zones()
    display_zones(zones, zone_ids)
if __name__ == "__main__":
    main()
 
