#!/usr/bin/env python

# Software License Agreement (BSD License)
#
# Copyright (c) 2009, Eucalyptus Systems, Inc.
# All rights reserved.
#
# Redistribution and use of this software in source and binary forms, with or
# without modification, are permitted provided that the following conditions
# are met:
#
#   Redistributions of source code must retain the above
#   copyright notice, this list of conditions and the
#   following disclaimer.
#
#   Redistributions in binary form must reproduce the above
#   copyright notice, this list of conditions and the
#   following disclaimer in the documentation and/or other
#   materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Author: Neil Soman neil@eucalyptus.com

import getopt, sys, os
import euca_tools
from M2Crypto import RSA
from hashlib import sha1 as sha
from binascii import hexlify, unhexlify

usage_string = """
DESCRIPTION
    Gets the fingerprint for a private key.

USAGE
    euca-fingerprint-key [-h, --help] [--version] [--debug] path_to_key

    Where
	path_to_key - Path to the PEM file for the key.
"""

version_string = """    euca-fingerprint-key version: 1.0 (BSD)"""

def usage():
    print usage_string
    euca_tools.usage()

def version():
    print version_string
    sys.exit()

def display_fingerprint(key_path):
    rsa = RSA.load_key(key_path)
    sha_key = sha()
    sha_key.update(rsa.n)
    print hexlify(sha_key.digest())

def main():
    euca = None
    try:
        euca = euca_tools.EucaTool() 
    except:
        usage()

    key_path = None

    for name, value in euca.opts:
        if name in ('-h', '--help'):
            usage()
	elif name in ('--version'):
	    version()
   
    for arg in euca.args:
	key_path = arg
	break

    if key_path:
        display_fingerprint(key_path) 
    else:
	print 'key_path must be specified'
	usage()

if __name__ == "__main__":
    main()
 
