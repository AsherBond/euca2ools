#!/usr/bin/env python

# Software License Agreement (BSD License)
#
# Copyright (c) 2008, Regents of the University of California
# All rights reserved.
#
# Redistribution and use of this software in source and binary forms, with or
# without modification, are permitted provided that the following conditions
# are met:
#
#   Redistributions of source code must retain the above
#   copyright notice, this list of conditions and the
#   following disclaimer.
#
#   Redistributions in binary form must reproduce the above
#   copyright notice, this list of conditions and the
#   following disclaimer in the documentation and/or other
#   materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Author: Sunil Soman sunils@cs.ucsb.edu

import getopt, sys, os
import boto

usage_string = """
DESCRIPTION
    Modify attributes for an image.

USAGE
    euca-modify-image-attribute -l [-a | --add entity ] [-r | --remove entity]
	  [-h, --help] [--version] [--debug] image_id 

    Where
	image_id - unique identifier for the image that you want to retrieve the attributes for. 
	-h, --help - Display this help message.
	--version - Display the version of this tool.
        --debug - Turn on debugging.
"""

version_string = """    euca-modify-image-attribute version: 1.0 (BSD)"""

def usage():
    print usage_string
    sys.exit()

def version():
    print version_string
    sys.exit()

def parse_url(url):
    host = None
    port = None
    service_path = None
    url = url.replace('http://', '')
    url_parts = url.split(':')
    if (len(url_parts) > 1):
        host = url_parts[0]
        path_parts = url_parts[1].split('/', 1)
	if (len(path_parts) > 1):
	    port = int(path_parts[0])
	    service_path = path_parts[1]
    return host, port, service_path	
 
def display_image_attribute(image_attribute):
    if image_attribute.name == 'launch_permission':
        if image_attribute.attrs.has_key('groups'):
	    for group in image_attribute.attrs['groups']:
		print 'launchPermission\t%s\tgroup\t%s' % (image_attribute.image_id, group)
	if image_attribute.attrs.has_key('user_ids'):
	    for userid in image_attribute.attrs['user_ids']:
		print 'launchPermission\t%s\tuserId\t%s' % (image_attribute.image_id, userid)
    if image_attribute.attrs.has_key('product_codes'):
	for product_code in image_attribute.attrs['product_codes']:
	    print 'productCodes\t%s\tproductCode\t%s' % (image_attribute.image_id, product_code)
    if image_attribute.kernel:
	print 'kernel\t%s\tkernel\t%s' % (image_attribute.image_id, image_attribute.kernel)
    if image_attribute.ramdisk:
	print 'ramdisk\t%s\tramdisk\t%s' % (image_attribute.image_id, image_attribute.ramdisk)

def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], 'hlpi:a:r:',
                                   ['launch-permission', 'product-code=', 'add=', 'remove=',
				    'kernel', 'ramdisk', 'help', 'version', 'debug'])
    except:
        usage()
 
    debug = False
    image_id = None
    code = None
    entity = None
    ec2_user_access_key = None
    ec2_user_secret_key = None 
    image_attribute = None
    operation_type = None
    user_ids = []
    groups = []
    default_ec2_url = 'http://localhost:8773/services/Eucalyptus'

    for name, value in opts:
	if name in ('-p', '--product-code'):
	    if not image_attribute:
	        image_attribute = 'productCodes'
	        code = value
	elif name in ('-l', '--launch-permission'):
	    if not image_attribute:
		image_attribute = 'launchPermission'
	elif name in ('-a', '--add'):
	    entity = value
	    operation_type = 'add' 	
	elif name in ('-r', '--remove'):
	    entity = value 	
	    operation_type = 'remove'
        elif name in ('-h', '--help'):
            usage()
	elif name in ('--version'):
	    version()
	elif name in ('--debug'):
	    debug = True
    
    ec2_user_access_key = os.getenv('EC2_ACCESS_KEY')
    if not ec2_user_access_key:
        print 'EC2_ACCESS_KEY environment variable must be set.'
	usage()
 
    ec2_user_secret_key = os.getenv('EC2_SECRET_KEY')
    if not ec2_user_secret_key:
        print 'EC2_SECRET_KEY environment variable must be set.'
	usage()

    ec2_url = os.getenv('EC2_URL')
    if not ec2_url:
	ec2_url = default_ec2_url

    for arg in args:
        image_id = arg
	break

    if image_attribute == 'launchPermission':
	if entity == 'all':
	    groups.append(entity)
	else:
	    user_ids.append(entity)

    host, port, service = parse_url(ec2_url)
    ec2_conn = boto.connect_ec2(aws_access_key_id=ec2_user_access_key, 
			        aws_secret_access_key=ec2_user_secret_key,
				is_secure=False,
				host=host,
				port=port,
				service=service)
    if image_id:
	return_code = ec2_conn.modify_image_attribute(image_id = image_id,
 						       attribute = image_attribute,
						       operation = operation_type,
						       user_ids = user_ids,
						       groups = groups)
	if return_code:
	    print 'IMAGE\t%s' % (image_id)
    else:
    	print 'image_id must be specified'
	usage()
if __name__ == "__main__":
    main()
 
