#!/usr/bin/env python

# Software License Agreement (BSD License)
#
# Copyright (c) 2009, Eucalyptus Systems, Inc.
# All rights reserved.
#
# Redistribution and use of this software in source and binary forms, with or
# without modification, are permitted provided that the following conditions
# are met:
#
#   Redistributions of source code must retain the above
#   copyright notice, this list of conditions and the
#   following disclaimer.
#
#   Redistributions in binary form must reproduce the above
#   copyright notice, this list of conditions and the
#   following disclaimer in the documentation and/or other
#   materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Author: Neil Soman neil@eucalyptus.com

import getopt, sys, os
from euca2ools import Euca2ool, ValidationError, Util

usage_string = """
DESCRIPTION
    Shows information about instances.

USAGE
    euca-describe-instances [-h, --help] [--version] [--debug]
	[instance1 instance2... instanceN] 

    Where
	instance1 instance2...instanceN - instances to describe. 
"""

version_string = """    euca-describe-instances version: 1.0 (BSD)"""

def usage():
    print usage_string
    Util().usage()

def version():
    print version_string
    sys.exit()

def display_reservations(reservations, instance_ids):
    check_instance_ids = False
    if(len(instance_ids) > 0):
	check_instance_ids = True
    for reservation in reservations:
        dont_display = False
	instances = []
 	for instance in reservation.instances:
            if check_instance_ids:
	        if instance.id in instance_ids:
		    instances.append(instance)
	    else:
		instances = reservation.instances
	if (len(instances) == 0):
 	    continue
        reservation_string = '%s\t%s' % (reservation.id, reservation.owner_id)
	group_delim = '\t'
	for group in reservation.groups:
	    reservation_string += '%s%s' % (group_delim, group.id)
	    group_delim = ', '
	print 'RESERVATION\t%s' % (reservation_string) 
	for instance in instances:
	    instance_string = '%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s' % (instance.id, instance.image_id, instance.public_dns_name, instance.private_dns_name, instance.state, instance.key_name, instance.launch_time, instance.kernel, instance.ramdisk)
	    print 'INSTANCE\t%s' % (instance_string)

def main():
    euca = None
    try:
	euca = Euca2ool()
    except:
        usage()
 
    for name, value in euca.opts:
        if name in ('-h', '--help'):
            usage()
	elif name == '--version':
	    version()

    instance_ids = euca.process_args()
    try:
	for id in instance_ids:
    	    euca.validate_instance_id(id)
    except ValidationError as error:
        print error.message
        sys.exit(1)

    #This is workaround for an issue with the front end (does not return the correct instances when an instance id is specified LP:356580)
    euca_conn = euca.make_connection()
    reservations = euca_conn.get_all_instances(instance_ids)
    display_reservations(reservations, instance_ids)
if __name__ == "__main__":
    main()
 
