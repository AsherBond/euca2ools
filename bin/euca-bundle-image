#!/usr/bin/env python

# Software License Agreement (BSD License)
#
# Copyright (c) 2008, Regents of the University of California
# All rights reserved.
#
# Redistribution and use of this software in source and binary forms, with or
# without modification, are permitted provided that the following conditions
# are met:
#
#   Redistributions of source code must retain the above
#   copyright notice, this list of conditions and the
#   following disclaimer.
#
#   Redistributions in binary form must reproduce the above
#   copyright notice, this list of conditions and the
#   following disclaimer in the documentation and/or other
#   materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Author: Sunil Soman sunils@cs.ucsb.edu

import getopt, sys, os
import tarfile
import gzip
from ncrypt.cipher import *
from Crypto.Util.randpool import RandomPool
from Crypto.Util import * 
from xml.dom.minidom import Document

usage_string = """
USAGE
    euca-bundle-image -i, --image image_path -c, --cert cert_path -k, --privatekey private_key_path 
	  -u, --user user 
          [-p, --prefix prefix] [--kernel kernel_id] [--ramdisk ramdisk_id] 
	  [-B, --block-device-mapping mapping] [-d, --destination destination_path] 
	  [--ec2cert ec2cert_path] [-h, --help] [-m, --manual] [-r, --arch target_architecture] 
	  [-b, --batch] [--version]

    Where
        image_path - The path to the file system image to bundle.
	cert_path - The path to the user's PEM encoded RSA public key certificate file.
	private_key_path - The path to the user's PEM encoded RSA private key file.
	user -  The user's EC2 user ID (not the Access Key/Query Key ID).

	prefix - The filename prefix for bundled files. Defaults to image name.
	kernel_id - Id of the default kernel to launch the instance with.
	ramdisk_id - Id of the default ramdisk to launch the instance with.
	mapping - Default block-device-mapping scheme.
	destination_path - The directory to create the bundle in. Defaults to '/tmp'.
	ec2cert_path - The path to the Cloud's X509 public key certificate.
	-h, --help - Display this help message.
	target_architecture - Target architecture ['x86_64' or 'i386'].
	-b, --batch - Run in non-interactive mode.
"""

version_string = """    euca-bundle-image version: 1.0 (BSD)"""

IMAGE_IO_CHUNK = 8 * 1024
IMAGE_SPLIT_CHUNK = IMAGE_IO_CHUNK * 1024;

def usage():
    print usage_string
    sys.exit()

def version():
    print version_string
    sys.exit()

def split_file(file, chunk_size):
    parts = []
    file_size = os.path.getsize(file)
    in_file = open(file, "rb")
    number_parts = int(file_size / chunk_size)
    number_parts += 1
    bytes_read = 0
    for i in range(0, number_parts, 1):
	filename = '%s.%d' % (file, i)
	file_part = open(filename, "wb")
	part_bytes_written = 0
	while part_bytes_written < IMAGE_SPLIT_CHUNK:
	    data = in_file.read(IMAGE_IO_CHUNK)
	    file_part.write(data)
	    data_len = len(data)
	    part_bytes_written += data_len    	    		
	    bytes_read += data_len
	    if bytes_read >= file_size: break
	file_part.close()			
	parts.append(filename)	

    in_file.close()
    return parts
 
def check_image():
    print 'checking image'

def tar_image(file): 
    print 'tarring image'
    tar_file = '%s.tar' % (file)
    tar = tarfile.open(tar_file, "w")
    tar.add(file)
    tar.close()
    return tar_file

def zip_image(file):
    print 'zipping image'
    file_in = open(file, 'rb')
    gz_file = '%s.gz' % (file)
    gz_out = gzip.open(gz_file, 'wb')
    gz_out.writelines(file_in)
    gz_out.close()
    file_in.close()
    return gz_file

def hexToBytes(hexString):
    bytes = []
    hexString = ''.join(hexString.split(" "))
    for i in range(0, len(hexString), 2):
        bytes.append(chr(int (hexString[i:i+2], 16)))

    return ''.join( bytes )


def encrypt_file( cipherType, key, iv, in_file, out_file ) :
    enc = EncryptCipher( cipherType, key, iv )
    while 1 :
        data = in_file.read(IMAGE_IO_CHUNK)
        if not data : break
        out_data = enc.update( data )
        out_file.write( out_data )
    final_data = enc.finish()
    out_file.write( final_data )

def decrypt_file( cipherType, key, iv, in_file, out_file ) :
    dec = DecryptCipher( cipherType, key, iv )
    while 1 :
        data = in_file.read(IMAGE_IO_CHUNK)
        if not data : break
        out_data = dec.update( data )
        out_file.write( out_data )
    final_data = dec.finish()
    out_file.write( final_data )
 
def encrypt_image(file):
    print 'encrypting image'
    enc_file = '%s.enc' % (file)
    cipher_type = CipherType('AES-128', 'CBC')
    pool = RandomPool()
    pool.stir()
    print 'ivlength:', cipher_type.ivLength()
    key=hex(number.getRandomNumber(cipher_type.keyLength() * 8, pool.get_bytes))[2:34]
    iv=hex(number.getRandomNumber(cipher_type.ivLength() * 8, pool.get_bytes))[2:34]
    print 'key:', key, ' iv:', iv 

    in_file = open(file)
    out_file = open(enc_file, "wb")
    encrypt_file(cipher_type, hexToBytes(key), hexToBytes(iv), in_file, out_file)
    in_file.close()
    out_file.close()
    return enc_file

def split_image(file): 
    print 'splitting image'  
    return split_file(file, IMAGE_SPLIT_CHUNK) 

def generate_manifest(parts, file):
    print 'generating manifest'
    manifest_file = '%s.manifest.xml' % (file)
    manifest_out_file = open(manifest_file, "wb")
    doc = Document()

    manifest_elem = doc.createElement("manifest")
    doc.appendChild(manifest_elem)

    # Create the main <card> element
    for part in parts:
	part_elem = doc.createElement("part")
	part_value = doc.createTextNode(part)
	part_elem.appendChild(part_value)
	manifest_elem.appendChild(part_elem)

    manifest_out_file.write(doc.toxml())

    manifest_out_file.close() 

def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], 'i:c:k:u:hB:d:br:',
                                   ['image=', 'cert=', 'privatekey=', 'user=', 'help',
                                    'kernel=', 'ramdisk=', 'block-device-mapping=', 'destination=', 'ec2cert=', 'arch=', 'batch', 'version', 'debug'])
    except:
        usage()
  
    debug=False 
    image_path=None
    kernel=None
    user=None
    ramdisk=None
    cert_path=None
    private_key_path=None
    prefix=None
    destination_path=None
    ec2cert_path=None
    target_arch=None
    batch=False
    
    for name, value in opts:
        if name in ('-h', '--help'):
            usage()
        if name in ('-i', '--image'):
            image_path = value
        if name in ('-c', '--cert'):
            cert_path = value
        if name in ('-k', '--privatekey'):
            private_key_path = value
        if name in ('-u', '--user'):
            user = value
        if name in ('--kernel'):
            kernel = value
        if name in ('--ramdisk'):
            ramdisk = value
        if name in ('-p', '--prefix'):
            prefix = value
        if name in ('-d', '--destination'):
            destination_path = value
        if name in ('--ec2cert'):
            ec2cert_path = value
        if name in ('-r', '--arch'):
            target_arch = value
	    print target_arch
	    if target_arch != 'i386' and target_arch != 'x86_64':
		print 'target architecture must be i386 or x86_64'
		usage()
	if name in ('--batch'):
	    batch = True
	if name in ('--version'):
	    version()
	if name in ('--debug'):
	    debug = True

    if image_path and cert_path and private_key_path and user:
	check_image()
	tar_file = tar_image(image_path)
	zip_file = zip_image(tar_file)
	os.remove(tar_file)
	encrypted_file = encrypt_image(zip_file)
	os.remove(zip_file)
	parts = split_image(encrypted_file)
	generate_manifest(parts, image_path)
    else:
	print 'image, cert, privatekey and user MUST be specified.'
	usage()
if __name__ == "__main__":
    main()
       

