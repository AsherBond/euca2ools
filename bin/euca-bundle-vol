#!/usr/bin/env python

# Software License Agreement (BSD License)
#
# Copyright (c) 2009, Eucalyptus Systems, Inc.
# All rights reserved.
#
# Redistribution and use of this software in source and binary forms, with or
# without modification, are permitted provided that the following conditions
# are met:
#
#   Redistributions of source code must retain the above
#   copyright notice, this list of conditions and the
#   following disclaimer.
#
#   Redistributions in binary form must reproduce the above
#   copyright notice, this list of conditions and the
#   following disclaimer in the documentation and/or other
#   materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Author: Neil Soman neil@eucalyptus.com

import getopt, sys, os
from euca2ools import Euca2ool, ValidationError, CopyError, Util
from subprocess import * 
import platform

usage_string = """
USAGE
    euca-bundle-vol -u, --user user -s, --size size_in_MB
	[-c, --cert cert_path] [-k, --privatekey private_key_path] 
	[-a, --all] [-e, --exclude dir1, dir2,...dirN] [-p, --prefix prefix]	
	[--[no-]inherit] [-v, --volume volume_path] [--fstab fstab_path] [--generate-fstab]
	[--kernel kernel_id] [--ramdisk ramdisk_id]
	[-B, --block-device-mapping mapping] [-d, --destination destination_path] 
	[--ec2cert ec2cert_path] [-r, --arch target_architecture] 
	[-b, --batch] 

    Where
	image_path - The path to the file system image to bundle.
	cert_path - The path to the user's PEM encoded RSA public key certificate file.
	private_key_path - The path to the user's PEM encoded RSA private key file.
	user -  The user's EC2 user ID (not the Access Key/Query Key ID).
	all - Include all directories in the volume.
	dir1, dir2,...dirN - directories to exclude
	prefix - The filename prefix for bundled files. Defaults to image name.
	size_in_MB - Size of the image file to create in MB.
	--[no-]inherit - Inherit instance metadata.
	volume_path - Path to a volume that should be bundled into the image.
	--fstab - Path to the fstab to be bundled into the image.
	--generate-fstab - Generate fstab to bundle into the image.
	kernel_id - Id of the default kernel to launch the instance with.
	ramdisk_id - Id of the default ramdisk to launch the instance with.
	mapping - Default block-device-mapping scheme.
	destination_path - The directory to create the bundle in. Defaults to '/tmp'.
	ec2cert_path - The path to the Cloud's X509 public key certificate.
	target_architecture - Target architecture ['x86_64' or 'i386'].
	-b, --batch - Run in non-interactive mode.
"""

MAX_IMAGE_SIZE = 1024 * 10

version_string = """    euca-bundle-vol version: 1.0 (BSD)"""

def usage():
    print usage_string
    sys.exit()

def version():
    print version_string
    sys.exit()

def check_root():
    if os.geteuid() == 0:
	return
    else:
	print "Must be superuser to execute this command."
	sys.exit()

def check_image_size(size):
    if size > MAX_IMAGE_SIZE:
	print "Image Size is too large (Max = %d MB)" % (MAX_IMAGE_SIZE) 
	sys.exit()
 
def parse_excludes(excludes_string):
    excludes = []
    if excludes_string:
        excludes_string = excludes_string.replace(' ', '')
        excludes = excludes_string.split(',')
    return excludes

def get_instance_metadata(ramdisk, kernel, mapping):
    product_codes = None
    ramdisk_id = ramdisk
    kernel_id = kernel
    block_dev_mapping = mapping
    util = Util()
    try:
	util.can_read_instance_metadata()
	if not ramdisk_id:
	    ramdisk_id = util.get_instance_ramdisk()

	if not kernel_id:
	    kernel_id = util.get_instance_kernel()

        if not block_dev_mapping:
	    block_dev_mapping = util.get_instance_block_device_mappings().split(' ')

        product_codes = util.get_instance_product_codes().split(' ')
    except:
	print "Unable to read instance metadata. Pass the --no-inherit option if you wish to exclude instance metadata."
	sys.exit()	
   
    return ramdisk_id, kernel_id, block_dev_mapping, product_codes	

def cleanup(path):
   if os.path.exists(path):
	os.remove(path)

def main():
    euca = None
    try:
        euca = Euca2ool('a:c:k:u:B:d:br:p:s:v:e:',
                                   ['cert=', 'privatekey=', 'user=', 'prefix=', 'volume=', 'all',
                                    'kernel=', 'ramdisk=', 'block-device-mapping=', 'destination=', 'ec2cert=', 'arch=', 'size=', 'exclude=', 'inherit=', 'no-inherit', 'batch', 'fstab=', 'generate-fstab'])
    except:
        usage()
  
    kernel=None
    user=None
    ramdisk=None
    cert_path=os.getenv('EC2_CERT')
    private_key_path=os.getenv('EC2_PRIVATE_KEY')
    prefix='image'
    size_in_MB = 10*1024
    destination_path='/disk1'
    ec2cert_path=os.getenv('EUCALYPTUS_CERT')
    target_arch='x86_64'
    mapping = None
    excludes_string = None
    excludes = None
    batch=False
    all=False
    volume_path = "/"
    inherit = True
    product_codes = None
    fstab_path = None
    generate_fstab = False
 
    for name, value in euca.opts:
        if name in ('-h', '--help'):
            usage()
        elif name in ('-c', '--cert'):
            cert_path = value
        elif name in ('-k', '--privatekey'):
            private_key_path = value
        elif name in ('-u', '--user'):
	    try:
                user = int(value)
	    except ValueError:
		print "Invalid user"
		sys.exit()
        elif name == '--kernel':
            kernel = value
        elif name == '--ramdisk':
            ramdisk = value
        elif name in ('-p', '--prefix'):
            prefix = value
        elif name in ('-s', '--size'):
            size_in_MB = int(value)
        elif name in ('-v', '--volume'):
            volume_path = value
        elif name in ('-e', '--exclude'):
            excludes_string = value
        elif name in ('-d', '--destination'):
            destination_path = value
        elif name == '--ec2cert':
            ec2cert_path = value
        elif name in ('-a', '--all'):
            all = True
        elif name in ('-r', '--arch'):
            target_arch = value
	    if target_arch != 'i386' and target_arch != 'x86_64':
		print 'target architecture must be i386 or x86_64'
		usage()
	elif name in ('-B', '--block-device-mapping'):
	    mapping = value
	elif name == '--no-inherit':
	    inherit = False
	elif name == '--batch':
	    batch = True
	elif name == '--generate-fstab':
	    generate_fstab = True	
	elif name == '--fstab':
	    fstab_path = value
	
    if size_in_MB and cert_path and private_key_path and user and ec2cert_path:
	try:
	    euca.validate_file(cert_path)
	    euca.validate_file(private_key_path)
	    euca.validate_file(ec2cert_path)
	    euca.validate_dir(volume_path)
	    if generate_fstab and fstab_path:
		print "--generate-fstab and --fstab path cannot both be set."
		sys.exit(1)
	    if fstab_path:
		euca.validate_file(fstab_path)
	except ValidationError as error:
	    print error.message
	    sys.exit(1)
	if not fstab_path:
	    if platform.machine() == 'i386':
		fstab_path = "old"
	    else:
		fstab_path = "new"

	check_root()
	check_image_size(size_in_MB)
	volume_path = os.path.normpath(volume_path)
	if not all:
 	    excludes = parse_excludes(excludes_string)
	    euca.add_excludes(volume_path, excludes)
	if inherit:
	    ramdisk, kernel, mapping, product_codes = get_instance_metadata(ramdisk, kernel, mapping)   
	image_path = euca.make_image(size_in_MB, excludes, prefix, destination_path)    
	image_path = os.path.normpath(image_path)
	if (image_path.find(volume_path) == 0):
	    exclude_image = image_path.replace(volume_path, "", 1)
	    image_path_parts = exclude_image.split("/")
	    if(len(image_path_parts) > 1):
	        exclude_image = exclude_image.replace(image_path_parts[0] + "/", "", 1)
	    excludes.append(exclude_image)
	try:
            euca.copy_volume(image_path, volume_path, excludes, fstab_path)
	except CopyError as copy_error:
	    print copy_error.message
	    cleanup(image_path)
	    sys.exit(1)

	image_size, sha_image_digest = euca.check_image(image_path, destination_path)
	if not prefix:
            prefix = euca.get_relative_filename(image_path)
	tgz_file = euca.tarzip_image(prefix, image_path, destination_path)
	encrypted_file, key, iv, bundled_size = euca.encrypt_image(tgz_file)
	os.remove(tgz_file)
	parts, parts_digest = euca.split_image(encrypted_file)
	euca.generate_manifest(destination_path, prefix, parts, parts_digest, image_path, key, iv, cert_path, ec2cert_path, private_key_path, target_arch, image_size, bundled_size, sha_image_digest, user, kernel, ramdisk, mapping, product_codes)
        os.remove(encrypted_file)
	cleanup(image_path)
    else:
	if not size_in_MB:
	    print 'size must be specified.'
	if not cert_path:
	    print 'cert must be specified.'
	if not private_key_path:
 	    print 'privatekey must be specified.'
	if not user:
 	    print 'user must be specified.'
	if not ec2cert_path:
 	    print 'ec2cert must be specified.'
	usage()
if __name__ == "__main__":
    main()
       

