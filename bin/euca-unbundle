#!/usr/bin/env python

# Software License Agreement (BSD License)
#
# Copyright (c) 2009, Regents of the University of California
# All rights reserved.
#
# Redistribution and use of this software in source and binary forms, with or
# without modification, are permitted provided that the following conditions
# are met:
#
#   Redistributions of source code must retain the above
#   copyright notice, this list of conditions and the
#   following disclaimer.
#
#   Redistributions in binary form must reproduce the above
#   copyright notice, this list of conditions and the
#   following disclaimer in the documentation and/or other
#   materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Author: Sunil Soman sunils@cs.ucsb.edu

import getopt, sys, os
import euca_tools
import tarfile
import gzip
from xml.dom import minidom
from xml.dom.minidom import Document
from M2Crypto import BN, EVP, RSA, util, Rand, m2, X509
from binascii import hexlify, unhexlify

VERSION = "2007-10-10"
BUNDLER_NAME = "euca-tools"
BUNDLER_VERSION = "1.0"
AES = 'AES-128-CBC'

usage_string = """
USAGE
    euca-unbundle-image -m, --manifest manifest_path -k, --privatekey private_key_path 
	[-s, --source source_directory] [-d, --destination destination_directory] [-h, --help]

    Where
	manifest_path - The path to the manifest.
	private_key_path - The path to the user's PEM encoded RSA private key file.
	source_directory - The source directory for the bundled image parts (default = manifest's directory).
 	destination_directory - The destination directory for unbundled image (defaults = current directory).
	-h, --help - Display this help message.
"""

version_string = """    euca-unbundle-image version: 1.0 (BSD)"""

IMAGE_IO_CHUNK = 8 * 1024
IMAGE_SPLIT_CHUNK = IMAGE_IO_CHUNK * 1024;

def usage():
    print usage_string
    euca_tools.usage()

def version():
    print version_string
    sys.exit()

def main():
    try:
        euca = euca_tools.EucaTool('m:k:d:s:',
                                   ['manifest=', 'privatekey=', 'destination=', 'source='])
    except:
        usage()
  
    private_key_path=os.getenv('EC2_PRIVATE_KEY')
    manifest_path = None
    batch=False
    directory = '.' 
    src_directory = None
     
    for name, value in euca.opts:
        if name in ('-h', '--help'):
            usage()
        elif name in ('-k', '--privatekey'):
            private_key_path = value
	elif name in ('-m', '--manifest'):
	    manifest_path = value 
	elif name in ('-d', '--directory'):
	    directory = value
	elif name in ('-s', '--source'):
	    src_directory = value
	elif name in ('--version'):
	    version()

    if manifest_path and private_key_path:
	parts, encrypted_key, encrypted_iv = euca.parse_manifest(manifest_path)
	if not src_directory:
	    src_directory = euca.get_file_path(manifest_path)
	image = euca.assemble_parts(src_directory, directory, manifest_path, parts)
	decrypted_image = euca.decrypt_image(image, encrypted_key, encrypted_iv, private_key_path)
	os.remove(image)
	unencrypted_image = euca.untarzip_image(directory, decrypted_image)
	os.remove(decrypted_image)
    else:
	print 'manifest_path and private_key MUST be specified.'
	usage()
if __name__ == "__main__":
    main()
       

