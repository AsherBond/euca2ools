#!/usr/bin/env python

# Software License Agreement (BSD License)
#
# Copyright (c) 2008, Regents of the University of California
# All rights reserved.
#
# Redistribution and use of this software in source and binary forms, with or
# without modification, are permitted provided that the following conditions
# are met:
#
#   Redistributions of source code must retain the above
#   copyright notice, this list of conditions and the
#   following disclaimer.
#
#   Redistributions in binary form must reproduce the above
#   copyright notice, this list of conditions and the
#   following disclaimer in the documentation and/or other
#   materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Author: Sunil Soman sunils@cs.ucsb.edu

import getopt, sys, os
import boto

usage_string = """
DESCRIPTION
    Shows information about machine images.

USAGE
    euca-describe-images [image1 image2 ... imageN] [-a] [-o owner] [-x user] 
	  [-h, --help] [--version] [--debug]

    Where
	image1 image2 ... imageN - images to describe. 
	-a - Show all images that the user has access to.
        -o - Show only images owned by the owner specified are displayed.
        owner - owner of the image (string).
        -x - Show only images that the specified user is permitted to launch.
        user - username (string).
	-h, --help - Display this help message.
	--version - Display the version of this tool.
        --debug - Turn on debugging.
"""

version_string = """    euca-describe-images version: 1.0 (BSD)"""

def usage():
    print usage_string
    sys.exit()

def version():
    print version_string
    sys.exit()

def process_args(args):
    image_ids = []
    for arg in args:
        image_ids.append(arg)
    return image_ids

def parse_url(url):
    host = None
    port = None
    service_path = None
    url = url.replace('http://', '')
    url_parts = url.split(':')
    if (len(url_parts) > 1):
        host = url_parts[0]
        path_parts = url_parts[1].split('/', 1)
	if (len(path_parts) > 1):
	    port = int(path_parts[0])
	    service_path = path_parts[1]
    return host, port, service_path	
  
def display_images(images, owner, image_ids):
    check_image_ids = False
    if(len(image_ids) > 0):
	check_image_ids = True
    for image in images:
	if owner:
	    if image.ownerId != owner:
		continue
        if check_image_ids:
	    if not image.id in image_ids:
	        continue
	image_string = '%s\t%s\t%s\t%s' % (image.id, image.location, image.ownerId, image.state)
	if image.is_public:
  	    image_string += '\tpublic'
  	image_string += '\t%s\t%s' % (image.architecture, image.type)	
	print 'IMAGE\t%s' % (image_string)


def main():
    try:
        opts, args = getopt.getopt(sys.argv[1:], 'ao:x:h',
                                   ['help', 'version', 'debug'])
    except:
        usage()
 
    debug = False
    show_all = False
    executable_by = None 
    owner = None
    ec2_user_access_key = None
    ec2_user_secret_key = None 
    default_ec2_url = 'http://localhost:8773/services/Eucalyptus'

    for name, value in opts:
        if name in ('-h', '--help'):
            usage()
	if name in ('-x'):
	    executable_by = value
	if name in ('-o'):
	    owner = value	     
        if name in ('-a'):
            show_all = True 
	if name in ('--version'):
	    version()
	if name in ('--debug'):
	    debug = True
    
    ec2_user_access_key = os.getenv('EC2_ACCESS_KEY')
    if not ec2_user_access_key:
        print 'EC2_ACCESS_KEY environment variable must be set.'
	usage()
 
    ec2_user_secret_key = os.getenv('EC2_SECRET_KEY')
    if not ec2_user_secret_key:
        print 'EC2_SECRET_KEY environment variable must be set.'
	usage()

    ec2_url = os.getenv('EC2_URL')
    if not ec2_url:
	ec2_url = default_ec2_url

    host, port, service = parse_url(ec2_url)
    ec2_conn = boto.connect_ec2(aws_access_key_id=ec2_user_access_key, 
			        aws_secret_access_key=ec2_user_secret_key,
				is_secure=False,
				host=host,
				port=port,
				service=service)

    image_ids = process_args(args)
    #This is workaround for an issue with the front end (does not return an image set when an image id is specified)
    images = ec2_conn.get_all_images()
    #TODO: DescribeImageAttributes from boto currently fails. Need to figure out incompatibility.
    display_images(images, owner, image_ids)
if __name__ == "__main__":
    main()
 
