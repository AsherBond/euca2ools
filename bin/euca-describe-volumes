#!/usr/bin/env python

# Software License Agreement (BSD License)
#
# Copyright (c) 2009, Eucalyptus Systems, Inc.
# All rights reserved.
#
# Redistribution and use of this software in source and binary forms, with or
# without modification, are permitted provided that the following conditions
# are met:
#
#   Redistributions of source code must retain the above
#   copyright notice, this list of conditions and the
#   following disclaimer.
#
#   Redistributions in binary form must reproduce the above
#   copyright notice, this list of conditions and the
#   following disclaimer in the documentation and/or other
#   materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#
# Author: Neil Soman neil@eucalyptus.com

import getopt, sys, os
from euca2ools import Euca2ool, ValidationError, Util

usage_string = """
DESCRIPTION
    Shows information about volumes.

USAGE
    euca-describe-volumes [-h, --help] [--version] [--debug]
	[volume1 volume2...volumeN] 

    Where
	volume1 volume2...volumeN- volumes to describe. 
"""

version_string = """    euca-describe-volumes version: 1.0 (BSD)"""

def usage():
    print usage_string
    Util().usage()

def version():
    print version_string
    sys.exit()

def display_volumes(volumes, volume_ids):
    check_volume_ids = False
    if(len(volume_ids) > 0):
	check_volume_ids = True

    for volume in volumes:
	if check_volume_ids:
	    if not volume.id in volume_ids:
	        continue
        volume_string = '%s\t%d' % (volume.id, volume.size)
	if volume.snapshot_id:
	    volume_string += '\t%s' % (volume.snapshot_id)
	volume_string += '\t%s\t%s' % (volume.status, volume.create_time)
	print 'VOLUME\t%s' % (volume_string)
	if volume.status == 'in-use':
	    attachment_string = '%s\t%s\t%s\t%s' % (volume.id, volume.instance_id, volume.device, volume.attach_time)
	    print 'ATTACHMENT\t%s' %(attachment_string)

def main():
    euca = None
    try:
	euca = Euca2ool()
    except:
        usage()
 
    for name, value in euca.opts:
        if name in ('-h', '--help'):
            usage()
	elif name in ('--version'):
	    version()
    
    volume_ids = euca.process_args()
    try:
	for id in volume_ids:
    	    euca.validate_volume_id(id)
    except ValidationError as error:
        print error.message
        sys.exit(1)

    euca_conn = euca.make_connection()
    volumes = euca_conn.get_all_volumes()
    display_volumes(volumes, volume_ids)
if __name__ == "__main__":
    main()
 
