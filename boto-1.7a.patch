diff -ur /disk1/boto-1.7a/boto/connection.py boto-1.7a-patched/boto/connection.py
--- /disk1/boto-1.7a/boto/connection.py	2009-04-09 15:48:44.000000000 -0700
+++ boto-1.7a-patched/boto/connection.py	2009-06-15 15:29:39.000000000 -0700
@@ -88,7 +88,7 @@
     def __init__(self, server, aws_access_key_id=None,
                  aws_secret_access_key=None, is_secure=True, port=None,
                  proxy=None, proxy_port=None, proxy_user=None,
-                 proxy_pass=None, debug=0, https_connection_factory=None):
+                 proxy_pass=None, debug=0, https_connection_factory=None, service=None):
         """
         @type server: string
         @param server: The server to make the connection to
@@ -149,6 +149,8 @@
             self.port = port
         else:
             self.port = PORTS_BY_SECURITY[is_secure]
+        if server:
+	    self.server_name = server
         if self.port == 80:
             self.server_name = server
         else:
@@ -158,11 +160,11 @@
             # in the Host header and so we needed to make sure we
             # did the same when calculating the signature.  In 2.6
             # it no longer does that.  Hence, this kludge.
-            if sys.version[:3] == "2.6" and self.port in [80, 443]:
+            if sys.version[:3] == "2.6": #and self.port in [80, 443]:
                 self.server_name = server
             else:
                 self.server_name = '%s:%d' % (server, self.port)
-        
+ 
         if aws_access_key_id:
             self.aws_access_key_id = aws_access_key_id
         elif os.environ.has_key('AWS_ACCESS_KEY_ID'):
@@ -177,6 +179,8 @@
         elif config.has_option('Credentials', 'aws_secret_access_key'):
             self.aws_secret_access_key = config.get('Credentials', 'aws_secret_access_key')
 
+        self.service = service
+
         # initialize an HMAC for signatures, make copies with each request
         self.hmac = hmac.new(self.aws_secret_access_key, digestmod=sha)
         if sha256:
@@ -226,7 +230,9 @@
     def get_http_connection(self, host, is_secure):
         if host is None:
             host = self.server_name
-        cached_name = is_secure and 'https://' or 'http://'
+	if self.service:
+	    host = '%s:%d' % (self.server_name, int(self.port))
+	cached_name = is_secure and 'https://' or 'http://'
         cached_name += host
         if cached_name in self._cache:
             return self._cache[cached_name]
@@ -376,6 +382,8 @@
 
     def make_request(self, method, path, headers=None, data='', host=None,
             auth_path=None, sender=None):
+	if self.service:
+	    path = '/%s/%s' % (self.service, path)
         if headers == None:
             headers = {'User-Agent' : UserAgent}
         else:
@@ -388,8 +396,12 @@
                 # If is_secure, we don't have to set the proxy authentication
                 # header here, we did that in the CONNECT to the proxy.
                 headers.update(self.get_proxy_auth_header())
-        self.add_aws_auth_header(headers, method, auth_path or path)
-        return self._mexe(method, path, data, headers, host, sender)
+	if self.service:
+	    request_string = path
+	else:
+	    request_string = auth_path or path
+        self.add_aws_auth_header(headers, method, request_string)
+	return self._mexe(method, path, data, headers, host, sender)
 
     def add_aws_auth_header(self, headers, method, path):
         if not headers.has_key('Date'):
@@ -410,12 +422,12 @@
     ResponseError = BotoServerError
 
     def __init__(self, aws_access_key_id=None, aws_secret_access_key=None,
-                 is_secure=True, port=None, proxy=None, proxy_port=None,
-                 proxy_user=None, proxy_pass=None, host=None, debug=0,
-                 https_connection_factory=None):
+                 is_secure=True, host=None, port=None, proxy=None, proxy_port=None,
+                 proxy_user=None, proxy_pass=None, region=None, debug=0,
+                 https_connection_factory=None, service=None):
         AWSAuthConnection.__init__(self, host, aws_access_key_id, aws_secret_access_key,
                                    is_secure, port, proxy, proxy_port, proxy_user, proxy_pass,
-                                   debug,  https_connection_factory)
+                                   debug,  https_connection_factory, service)
 
     def get_utf8_value(self, value):
         if not isinstance(value, str) and not isinstance(value, unicode):
@@ -494,6 +506,8 @@
         headers = {'User-Agent' : UserAgent}
         if path == None:
             path = '/'
+        if self.service:
+            path = '/%s/%s' % (self.service, path)
         if params == None:
             params = {}
         params['Action'] = action
diff -ur /disk1/boto-1.7a/boto/ec2/connection.py boto-1.7a-patched/boto/ec2/connection.py
--- /disk1/boto-1.7a/boto/ec2/connection.py	2009-04-09 15:48:44.000000000 -0700
+++ boto-1.7a-patched/boto/ec2/connection.py	2009-06-15 15:11:36.000000000 -0700
@@ -52,9 +52,9 @@
     ResponseError = EC2ResponseError
 
     def __init__(self, aws_access_key_id=None, aws_secret_access_key=None,
-                 is_secure=True, port=None, proxy=None, proxy_port=None,
+                 is_secure=True, host=None, port=None, proxy=None, proxy_port=None,
                  proxy_user=None, proxy_pass=None, debug=0,
-                 https_connection_factory=None, region=None):
+                 https_connection_factory=None, region=None, service=None):
         """
         Init method to create a new connection to EC2.
         
@@ -64,8 +64,8 @@
             region = RegionInfo(self, self.DefaultRegionName, self.DefaultRegionEndpoint)
         self.region = region
         AWSQueryConnection.__init__(self, aws_access_key_id, aws_secret_access_key,
-                                    is_secure, port, proxy, proxy_port, proxy_user, proxy_pass,
-                                    self.region.endpoint, debug, https_connection_factory)
+                                    is_secure, host, port, proxy, proxy_port, proxy_user, proxy_pass,
+                                    self.region.endpoint, debug, https_connection_factory, service)
 
     def get_params(self):
         """
@@ -211,7 +211,7 @@
         return self.get_object('DescribeImageAttribute', params, ImageAttribute)
         
     def modify_image_attribute(self, image_id, attribute='launchPermission',
-                               operation='add', user_ids=None, groups=None):
+                               operation=None, user_ids=None, groups=None, product_codes=None):
         """
         Changes an attribute of an image.
         See http://docs.amazonwebservices.com/AWSEC2/2008-02-01/DeveloperGuide/ApiReference-Query-ModifyImageAttribute.html
@@ -232,12 +232,16 @@
         @param groups: The groups to add/remove attributes
         """
         params = {'ImageId' : image_id,
-                  'Attribute' : attribute,
-                  'OperationType' : operation}
+                  'Attribute' : attribute}
+	if operation:
+	    params['OperationType'] = operation
         if user_ids:
             self.build_list_params(params, user_ids, 'UserId')
         if groups:
             self.build_list_params(params, groups, 'UserGroup')
+        if product_codes:
+            self.build_list_params(params, product_codes, 'ProductCode')
+
         return self.get_status('ModifyImageAttribute', params)
 
     def reset_image_attribute(self, image_id, attribute='launchPermission'):
@@ -514,7 +518,9 @@
         """
         if isinstance(zone, Zone):
             zone = zone.name
-        params = {'Size': size, 'AvailabilityZone' : zone}
+        params = {'AvailabilityZone' : zone}
+	if size:
+	    params['Size'] = size
         if snapshot:
             if isinstance(snapshot, Snapshot):
                 snapshot = snapshot.id
@@ -531,10 +537,12 @@
                   'Device' : device}
         return self.get_status('AttachVolume', params)
 
-    def detach_volume(self, volume_id, instance_id, device='', force=False):
-        params = {'InstanceId' : instance_id,
-                  'VolumeId' : volume_id,
-                  'Device' : device}
+    def detach_volume(self, volume_id, instance_id=None, device=None, force=False):
+        params = {'VolumeId' : volume_id}
+        if instance_id:
+	    params['InstanceId'] = instance_id
+        if device:
+	    params['Device'] = device
         if force:
             params['Force'] = 'true'
         return self.get_status('DetachVolume', params)
diff -ur /disk1/boto-1.7a/boto/ec2/image.py boto-1.7a-patched/boto/ec2/image.py
--- /disk1/boto-1.7a/boto/ec2/image.py	2008-12-10 03:43:33.000000000 -0800
+++ boto-1.7a-patched/boto/ec2/image.py	2009-06-13 17:27:59.000000000 -0700
@@ -157,9 +157,6 @@
     def endElement(self, name, value, connection):
         if name == 'launchPermission':
             self.name = 'launch_permission'
-        elif name == 'productCodes':
-            self.name = 'product_codes'
-            self.attrs[self.name] = []
         elif name == 'group':
             if self.attrs.has_key('groups'):
                 self.attrs['groups'].append(value)
@@ -173,7 +170,10 @@
         elif name == 'imageId':
             self.image_id = value
         elif name == 'productCode':
-            self.attrs['product_codes'].append(value)
+	    if self.attrs.has_key('product_codes'):
+		self.attrs['product_codes'].append(value)
+	    else:
+                self.attrs['product_codes'] = [value]
         elif name == 'kernel':
             self.kernel = value
         elif name == 'ramdisk':
diff -ur /disk1/boto-1.7a/boto/ec2/instance.py boto-1.7a-patched/boto/ec2/instance.py
--- /disk1/boto-1.7a/boto/ec2/instance.py	2008-12-10 03:43:33.000000000 -0800
+++ boto-1.7a-patched/boto/ec2/instance.py	2009-06-13 20:22:00.000000000 -0700
@@ -46,7 +46,7 @@
             return self.instances
         elif name == 'groupSet':
             self.groups = ResultSet([('item', Group)])
-            return self.groups
+	    return self.groups
         else:
             return None
 
@@ -82,6 +82,7 @@
         self.kernel = None
         self.ramdisk = None
         self.product_codes = []
+	self.ami_launch_index = None
 
     def __repr__(self):
         return 'Instance:%s' % self.id
diff -ur /disk1/boto-1.7a/boto/ec2/snapshot.py boto-1.7a-patched/boto/ec2/snapshot.py
--- /disk1/boto-1.7a/boto/ec2/snapshot.py	2008-12-10 03:43:33.000000000 -0800
+++ boto-1.7a-patched/boto/ec2/snapshot.py	2009-05-22 10:13:33.000000000 -0700
@@ -32,6 +32,7 @@
         self.progress = None
         self.start_time = None
         self.volume_id = None
+	self.status = None
 
     def __repr__(self):
         return 'Snapshot:%s' % self.id
@@ -43,7 +44,9 @@
             self.volume_id = value
         elif name == 'startTime':
             self.start_time = value
-        else:
+	elif name == 'status':
+            self.status = value        
+	else:
             setattr(self, name, value)
 
     def _update(self, updated):
diff -ur /disk1/boto-1.7a/boto/ec2/volume.py boto-1.7a-patched/boto/ec2/volume.py
--- /disk1/boto-1.7a/boto/ec2/volume.py	2009-04-09 15:48:44.000000000 -0700
+++ boto-1.7a-patched/boto/ec2/volume.py	2009-05-22 10:13:33.000000000 -0700
@@ -32,9 +32,15 @@
         self.create_time = None
         self.status = None
         self.size = None
+	self.instance_id = None
         self.snapshot_id = None
         self.attach_data = None
-
+	self.size = None
+        self.create_time = None
+        self.attach_time = None
+        self.status = None
+        self.device = None
+  
     def __repr__(self):
         return 'Volume:%s' % self.id
 
@@ -48,15 +54,26 @@
     def endElement(self, name, value, connection):
         if name == 'volumeId':
             self.id = value
-        elif name == 'createTime':
+        elif name == 'instanceId':
+            self.instance_id = value
+        elif name == 'snapshotId':
+            self.snapshot_id = value    
+	elif name == 'createTime':
             self.create_time = value
         elif name == 'status':
             self.status = value
-        elif name == 'size':
+        elif name == 'attachTime':
+            self.attach_time = value 
+	elif name == 'size':
             self.size = int(value)
         elif name == 'snapshotId':
             self.snapshot_id = value
-        else:
+        elif name == 'status':
+            if value != '':
+                self.status = value
+        elif name == 'device':
+            self.device = value
+	else:
             setattr(self, name, value)
 
     def delete(self):
diff -ur /disk1/boto-1.7a/boto/resultset.py boto-1.7a-patched/boto/resultset.py
--- /disk1/boto-1.7a/boto/resultset.py	2008-08-30 17:23:31.000000000 -0700
+++ boto-1.7a-patched/boto/resultset.py	2009-06-13 20:22:17.000000000 -0700
@@ -48,7 +48,7 @@
         self.next_token = None
         self.status = True
 
-    def startElement(self, name, attrs, connection):
+    def startElement(self, name, attrs, connection):	
         for t in self.markers:
             if name == t[0]:
                 obj = t[1](connection)
diff -ur /disk1/boto-1.7a/boto/s3/connection.py boto-1.7a-patched/boto/s3/connection.py
--- /disk1/boto-1.7a/boto/s3/connection.py	2009-04-09 15:48:43.000000000 -0700
+++ boto-1.7a-patched/boto/s3/connection.py	2009-06-15 15:11:50.000000000 -0700
@@ -95,12 +95,12 @@
                  is_secure=True, port=None, proxy=None, proxy_port=None,
                  proxy_user=None, proxy_pass=None,
                  host=DefaultHost, debug=0, https_connection_factory=None,
-                 calling_format=SubdomainCallingFormat()):
+                 calling_format=SubdomainCallingFormat(), service=None):
         self.calling_format = calling_format
         AWSAuthConnection.__init__(self, host,
                 aws_access_key_id, aws_secret_access_key,
                 is_secure, port, proxy, proxy_port, proxy_user, proxy_pass,
-                debug=debug, https_connection_factory=https_connection_factory)
+                debug=debug, https_connection_factory=https_connection_factory, service=service)
 
     def __iter__(self):
         return self.get_all_buckets()
@@ -297,9 +297,9 @@
         path = self.calling_format.build_path_base(bucket, key)
         auth_path = self.calling_format.build_auth_path(bucket, key)
         host = self.calling_format.build_host(self.server_name, bucket)
-        if query_args:
+	if query_args:
             path += '?' + query_args
             auth_path += '?' + query_args
-        return AWSAuthConnection.make_request(self, method, path, headers,
+	return AWSAuthConnection.make_request(self, method, path, headers,
                 data, host, auth_path, sender)
 
